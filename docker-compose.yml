version: '3.8'

services:
  # Database vettoriale Qdrant
  qdrant:
    image: qdrant/qdrant:latest
    container_name: multimodal-rag-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Applicazione MultimodalRAG
  multimodal-rag:
    build: .
    container_name: multimodal-rag-app
    ports:
      - "8501:8501"
    environment:
      - QDRANT_URL=http://qdrant:6333
      - GROQ_API_KEY=${GROQ_API_KEY}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - ENABLE_PERFORMANCE_MONITORING=${ENABLE_PERFORMANCE_MONITORING:-false}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./uploads:/app/uploads  # Per file caricati via UI
    depends_on:
      - qdrant
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis per caching (opzionale, per performance)
  redis:
    image: redis:7-alpine
    container_name: multimodal-rag-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring con Prometheus (opzionale)
  prometheus:
    image: prom/prometheus:latest
    container_name: multimodal-rag-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    profiles: ["monitoring"]

  # Grafana per visualizzazione metriche (opzionale)
  grafana:
    image: grafana/grafana:latest
    container_name: multimodal-rag-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    restart: unless-stopped
    profiles: ["monitoring"]

volumes:
  qdrant_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge
